# Generated by Django 5.1.6 on 2025-06-02 15:55

from django.db import migrations
from arbiter3.arbiter.models import Policy, QueryData, QueryParameters

def refresh_policy_queries(apps, schema_editor):
    policies = Policy.objects.all()

    for policy in policies:
        if policy.is_base_policy:
            policy.save()
        else:
            query_params = policy.query_data.get("params", None)
            if policy.query_data.get("is_raw_query", False) or not query_params:
                continue
            
            params = QueryParameters(
                cpu_threshold=query_params.get("cpu_threshold", None),
                mem_threshold=query_params.get("mem_threshold", None),
                user_whitelist=query_params.get("user_whitelist", None),
                proc_whitelist=query_params.get("proc_whitelist", None),
                use_pss_metric=query_params.get("use_pss", True),
            )

            policy.query_data = QueryData.build_query(
                lookback=policy.lookback,
                domain=policy.domain,
                params=params
            ).json()

            policy.save()


class Migration(migrations.Migration):
    dependencies = [
        ("arbiter", "0007_policy_watcher_mode"),
    ]

    operations = [
        migrations.RunPython(refresh_policy_queries)
    ]
